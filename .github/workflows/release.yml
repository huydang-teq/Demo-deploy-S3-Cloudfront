name: Demo Workflow Dispatch

on:
  workflow_dispatch:
    inputs:
      release-type:
        description: "Release type (one of): patch, minor, major"
        required: true
        type: choice
        options:
          - patch
          - minor
          - major

permissions:
  id-token: write
  contents: write

env:
  CF_DIST_ID: "EVED8FYT1CNCZ"
  S3_BUCKET: "s3://seminar-aws-s3-cloudfront-bucket"
  AWS_IAM: "583388259455"
  AWS_DEFAULT_REGION: "ap-northeast-1"
  BUILD_MODE: "dev"
  MATTERMOST_WEBHOOK_URL: "https://chat.teqnological.asia/hooks/7g7nycmbmt8q987wu4ykj3trke"

jobs:
  release:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Install pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 9

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.3'
          cache: 'pnpm'

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Git configuration
        run: |
          git config --global user.email "41898282+github-actions[bot]@users.noreply.github.com"
          git config --global user.name "GitHub Actions"

      # Bump package version
      - name: Bump release version
        run: |
          echo "NEW_VERSION=$(npm --no-git-tag-version version $RELEASE_TYPE)" >> $GITHUB_ENV
        env:
          RELEASE_TYPE: ${{ github.event.inputs.release-type }}

      # Update changelog
      - name: Update changelog
        uses: superfaceai/release-changelog-action@v1
        with:
          path-to-changelog: CHANGELOG.md
          version: ${{ env.NEW_VERSION }}
          operation: release

      - name: Commit changes and create tag
        run: |
          git add "package.json"
          git add "CHANGELOG.md"
          git commit -m "chore: release ${{ env.NEW_VERSION }}"
          git tag ${{ env.NEW_VERSION }}

      - name: Push changes to repository
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          git push origin && git push --tags

      - id: get-changelog
        name: Get version changelog
        uses: superfaceai/release-changelog-action@v1
        with:
          path-to-changelog: CHANGELOG.md
          version: ${{ env.NEW_VERSION }}
          operation: read

      - name: Update GitHub release documentation
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ env.NEW_VERSION }}
          body: ${{ steps.get-changelog.outputs.changelog }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  build:
    needs: [release]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          ref: ${{ env.NEW_VERSION }}

      - name: Install pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 9

      - uses: actions/setup-node@v4
        with:
          node-version: '20.3'
          cache: 'pnpm'

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Build ${{env.BUILD_MODE}}
        run: |
          pnpm build:${{env.BUILD_MODE}}
          ls -l dist

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: "demo"
          path: "dist"

  deploy:
    needs: [build]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - uses: actions/download-artifact@v4
        with:
          name: "demo"
          path: dist

      - name: Setup Python for awscli
        uses: actions/setup-python@v4
        with:
          python-version: '3.x'
          architecture: 'x64'

      - name: Install awscli
        run: |
          pip install --upgrade pip awscli

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::${{env.AWS_IAM}}:role/from_github_aws_oidc_demo
          aws-region: ${{env.AWS_DEFAULT_REGION}}

      - name: Get caller identity AWS
        run: aws sts get-caller-identity

      - name: Upload files to S3
        run: |
          aws s3 sync --delete dist ${{env.S3_BUCKET}} --cache-control max-age=360,s-maxage=360

      - name: Invalidate CloudFront cache
        run: |
          aws cloudfront create-invalidation --distribution-id ${{env.CF_DIST_ID}} --paths "/*"

  notify:
    needs: [deploy]
    timeout-minutes: 5
    runs-on: ubuntu-latest
    if: always()
    steps:
      - name: Notify Mattermost on success
        if: ${{ success() }}
        uses: mattermost/action-mattermost-notify@master
        with:
          MATTERMOST_WEBHOOK_URL: ${{ env.MATTERMOST_WEBHOOK_URL }}
          PAYLOAD: |
            {
              "attachments": [
                {
                  "color": "#00FF00",
                  "title": "Deployment succeeded",
                  "text": "Deployment of ${{ env.NEW_VERSION }} succeeded"
                }
              ]
            }

      - name: Notify Mattermost on failure
        if: ${{ failure() }}
        uses: mattermost/action-mattermost-notify@master
        with:
          MATTERMOST_WEBHOOK_URL: ${{ env.MATTERMOST_WEBHOOK_URL }}
          PAYLOAD: |
            {
              "attachments": [
                {
                  "color": "#FF0000",
                  "title": "Deployment failed",
                  "text": "Deployment of ${{ env.NEW_VERSION }} failed"
                }
              ]
            }
